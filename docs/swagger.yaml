basePath: /api/v1
definitions:
  anya-day_models_sql.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  anya-day_models_web.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.AddressInput:
    properties:
      address_line:
        type: string
      city:
        type: string
      country:
        type: string
      phone_number:
        type: integer
      postal_code:
        type: integer
    required:
    - address_line
    - city
    - country
    - phone_number
    type: object
  models.AddressInputNotBinding:
    properties:
      address_line:
        type: string
      city:
        type: string
      country:
        type: string
      phone_number:
        type: integer
      postal_code:
        type: integer
    type: object
  models.AddressRespData:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      number:
        type: integer
      postal_code:
        type: integer
      user_id:
        type: integer
    type: object
  models.CategoryInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.ChangePwInput:
    properties:
      new_password:
        type: string
      password:
        type: string
    required:
    - new_password
    - password
    type: object
  models.IDTemplate:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.LoginResp:
    properties:
      message:
        type: string
      status:
        type: string
      token:
        type: string
      user:
        type: string
    type: object
  models.MerchantAddrOutput:
    properties:
      address_line:
        type: string
      city:
        type: string
      country:
        type: string
    type: object
  models.MerchantDetailsOutput:
    properties:
      address:
        $ref: '#/definitions/models.MerchantAddrOutput'
      id:
        type: integer
      name:
        type: string
      rating:
        type: number
    type: object
  models.MerchantInput:
    properties:
      address_line:
        type: string
      city:
        type: string
      country:
        type: integer
      name:
        type: string
    required:
    - country
    - name
    type: object
  models.MerchantInputNoBinding:
    properties:
      address_line:
        type: string
      city:
        type: string
      country:
        type: integer
      name:
        type: string
    type: object
  models.MerchantOutput:
    properties:
      city:
        type: string
      id:
        type: integer
      name:
        type: string
      rating:
        type: number
    type: object
  models.ProductOutput:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      rating:
        type: number
    type: object
  models.RegisterInput:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  models.RegisterResp:
    properties:
      message:
        type: string
      user:
        properties:
          email:
            type: string
          username:
            type: string
        type: object
    type: object
  models.RoleDataResp:
    properties:
      role:
        type: string
      username:
        type: string
    type: object
  models.UpdateProfileInput:
    properties:
      email:
        type: string
      full_name:
        type: string
      username:
        type: string
    type: object
  models.UserCompleteDataResp:
    properties:
      address:
        $ref: '#/definitions/models.AddressRespData'
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  models.UserDataResp:
    properties:
      email:
        type: string
      fullname:
        type: string
      username:
        type: string
    type: object
  utils.NormalResp:
    properties:
      message:
        type: string
      success:
        type: string
    type: object
  utils.RespWithData:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
info:
  contact:
    email: riidloa@gmail.com
    name: Developer
  description: API which provide you backend service for your minimalist ecommerce
    app
  title: Anya Day API
  version: beta
paths:
  /categories:
    get:
      description: Get all of existing categories.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/anya-day_models_sql.Category'
              type: object
      summary: retrieve list of categories.
      tags:
      - Category
  /dev/categories:
    post:
      description: Create new category.
      parameters:
      - description: Insert new category name.
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.CategoryInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/anya-day_models_web.Category'
              type: object
      security:
      - BearerToken: []
      summary: '[RESTRICTED] Create new category.'
      tags:
      - Dev/Category
  /dev/categories/{id}:
    delete:
      description: Delete an existing category.
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/anya-day_models_web.Category'
              type: object
      security:
      - BearerToken: []
      summary: '[RESTRICTED] Delete an existing category.'
      tags:
      - Dev/Category
    put:
      description: Update an existing category.
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: integer
      - description: Insert new category name
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.CategoryInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/anya-day_models_web.Category'
              type: object
      security:
      - BearerToken: []
      summary: '[RESTRICTED] Update an existing category.'
      tags:
      - Dev/Category
  /dev/users/{id}/address:
    post:
      description: Create fresh complete address of an existing user. If you want
        to update just use the PUT instead which provides you only update what field
        you like.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: Insert new address, postal code isn't required.
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.AddressInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.AddressRespData'
              type: object
      security:
      - BearerToken: []
      summary: '[EXPERIMENTAL] [RESTRICTED] create complete address of an existing
        user.'
      tags:
      - Dev/User
    put:
      description: Update selected address field of an existing user.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: Update address field you like. Remove that you won't.
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.AddressInputNotBinding'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.NormalResp'
      security:
      - BearerToken: []
      summary: '[EXPERIMENTAL] [RESTRICTED] update address of an existing user.'
      tags:
      - Dev/User
  /dev/users/{id}/changepw:
    put:
      description: Attempt change password from an existing user
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: Entry existing user valid credentials and the new one.
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.ChangePwInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.NormalResp'
      security:
      - BearerToken: []
      summary: '[EXPERIMENTAL] [RESTRICTED] change an existing user password'
      tags:
      - Dev/User
  /dev/users/{id}/profile:
    delete:
      description: This request lead to removing all user's related data
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.UserDataResp'
              type: object
      security:
      - BearerToken: []
      summary: '[EXPERIMENTAL] [RESTRICTED] delete an existing user role'
      tags:
      - Dev/User
    get:
      description: Get complete details of logged user.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserCompleteDataResp'
      security:
      - BearerToken: []
      summary: '[EXPERIMENTAL] [RESTRICTED] get complete profile of an existing user.'
      tags:
      - Dev/User
    put:
      description: Change an existing user profile information which consists of email,
        fullname, and username. Email format following RFC 5322 format. For update
        address info instead, please use PUT user/profile/address instead. This endpoint
        has not POST method which same behaviour already handled by POST /register
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: Only insert profile aspect need to be updated. Inserted value
          may lead to error for some reasons such updating to used username
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.NormalResp'
      security:
      - BearerToken: []
      summary: '[EXPERIMENTAL] [RESTRICTED] change an existing user profile information.'
      tags:
      - Dev/User
  /dev/users/{id}/role:
    patch:
      description: Every patch request to this endpoint lead to switch role between
        [customer], [merchant]. Be careful, switching from [merchant] to [customer]
        lead to wipe out all user's merchant data (also its products)
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.RoleDataResp'
              type: object
      security:
      - BearerToken: []
      summary: '[EXPERIMENTAL] [RESTRICTED] change an existing user role'
      tags:
      - Dev/User
  /login:
    post:
      description: Login as existing user with valid credentials. Success attempt
        will return JWT token.
      parameters:
      - description: enter valid user's credential
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResp'
      summary: Login with an existing user
      tags:
      - Auth
  /merchants:
    get:
      description: Get all avalaible merchants.
      parameters:
      - example: Bandung
        in: query
        name: city
        type: string
      - in: query
        name: name
        type: string
      - example: "4.5"
        in: query
        name: rating
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.MerchantOutput'
              type: object
      summary: Get all avalaible merchants.
      tags:
      - Merchant
    post:
      description: create a complete merchant with the address of an existing user.
      parameters:
      - description: Insert new merchant info. only name and country are required
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.MerchantInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.IDTemplate'
              type: object
      security:
      - BearerToken: []
      summary: create a complete merchant.
      tags:
      - Merchant
  /merchants/{id}:
    delete:
      description: Delete an existing merchant. This revert user to customer
      parameters:
      - description: merchant id
        in: path
        name: id
        required: true
        type: integer
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.MerchantOutput'
              type: object
      security:
      - BearerToken: []
      summary: Delete an existing merchant.
      tags:
      - Merchant
    get:
      description: Get specific merchant.
      parameters:
      - description: merchant id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.MerchantDetailsOutput'
              type: object
      summary: Get specific merchant.
      tags:
      - Merchant
    put:
      description: update merchant information field of an existing merchant.
      parameters:
      - description: merchant id
        in: path
        name: id
        required: true
        type: integer
      - description: Update desired field
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.MerchantInputNoBinding'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.MerchantInputNoBinding'
              type: object
      security:
      - BearerToken: []
      summary: update an existing merchant.
      tags:
      - Merchant
  /merchants/{id}/products:
    get:
      description: Get all avalaible merchants.
      parameters:
      - description: merchant id
        in: path
        name: id
        required: true
        type: integer
      - in: query
        name: name
        type: string
      - in: query
        name: price
        type: string
      - in: query
        name: rating
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ProductOutput'
                  type: array
              type: object
      summary: Get all avalaible merchants.
      tags:
      - Merchant
  /merchants/my:
    get:
      description: Get user's merchant.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.MerchantDetailsOutput'
              type: object
      security:
      - BearerToken: []
      summary: Get user's merchant.
      tags:
      - Merchant
  /register:
    post:
      description: registering a new user
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterResp'
      summary: Register a user
      tags:
      - Auth
  /user/address:
    post:
      description: Create fresh complete address of an existing user. If you want
        to update just use the PUT instead which provides you only update what field
        you like.
      parameters:
      - description: Insert new address, postal code isn't required.
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.AddressInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.AddressRespData'
              type: object
      security:
      - BearerToken: []
      summary: create complete address of an existing user.
      tags:
      - User
    put:
      description: Update selected address field of an existing user.
      parameters:
      - description: Update address field you like. Remove that you won't.
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.AddressInputNotBinding'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.NormalResp'
      security:
      - BearerToken: []
      summary: update address of an existing user.
      tags:
      - User
  /user/changepw:
    put:
      description: Attempt change password from an existing user
      parameters:
      - description: Entry existing user valid credentials and the new one.
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.ChangePwInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.NormalResp'
      security:
      - BearerToken: []
      summary: change an existing user password
      tags:
      - User
  /user/profile:
    delete:
      description: This request lead to removing all user's related data
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.UserDataResp'
              type: object
      security:
      - BearerToken: []
      summary: delete an existing user role
      tags:
      - User
    get:
      description: Get complete details of logged user.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserCompleteDataResp'
      security:
      - BearerToken: []
      summary: get complete profile of an existing user.
      tags:
      - User
    put:
      description: Change an existing user profile information which consists of email,
        fullname, and username. Email format following RFC 5322 format. For update
        address info instead, please use PUT user/profile/address instead. This endpoint
        has not POST method which same behaviour already handled by POST /register
      parameters:
      - description: Only insert profile aspect need to be updated. Inserted value
          may lead to error for some reasons such updating to used username
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.NormalResp'
      security:
      - BearerToken: []
      summary: change an existing user profile information.
      tags:
      - User
  /user/role:
    patch:
      description: Every patch request to this endpoint lead to switch role between
        [customer], [merchant]. Be careful, switching from [merchant] to [customer]
        lead to wipe out all user's merchant data (also its products)
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_jwt_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.RespWithData'
            - properties:
                data:
                  $ref: '#/definitions/models.RoleDataResp'
              type: object
      security:
      - BearerToken: []
      summary: change an existing user role
      tags:
      - User
swagger: "2.0"
